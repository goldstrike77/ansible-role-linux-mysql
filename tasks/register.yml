---
- name: Check local consul client are accessible from current host.
  uri:
    url: '{{ consul_public_http_prot }}://{{ ansible_default_ipv4.address }}:{{ consul_public_http_port }}/v1/agent/service/register'
    method: 'GET'
    timeout: '5'
    validate_certs: 'no'
  environment:
    no_proxy: '{{ ansible_default_ipv4.address }}'
  changed_when: false
  failed_when: false
  register: check_consul_local
  when:
    - mysql_cluster_mgr_mode == "multi-primary"
    - mysql_cluster_mode == "mgr"

- name: Register MySQL service with an health check.
  uri:
    url: '{{ consul_public_http_prot }}://{{ ansible_default_ipv4.address }}:{{ consul_public_http_port }}/v1/agent/service/register'
    method: 'PUT'
    body: '{"tags":["service","mysql"],"ID":"{{ customer | lower | regex_replace("_", "-") }}-{{ environments | lower | regex_replace("_", "-") }}-{{ group_names[-1] | lower | regex_replace("_", "-") }}-{{ group_names[0] | lower | regex_replace("_", "-") }}-mysql","name":"{{ customer | lower | regex_replace("_", "-") }}-{{ environments | lower | regex_replace("_", "-") }}-{{ group_names[-1] | lower | regex_replace("_", "-") }}-{{ group_names[0] | lower | regex_replace("_", "-") }}-mysql","address":"{{ ansible_default_ipv4.address }}","port":{{ mysql_port_mgr }},"checks":[{"tcp":"{{ ansible_default_ipv4.address }}:{{ mysql_port_mgr }}","interval":"60s","timeout":"10s"}]}'
    body_format: 'json'
    status_code: '200'
    headers:
      X-Consul-Token: '{{ consul_public_exporter_token }}'
      X-Requested-By: '{{ ansible_default_ipv4.address }}'
      cache-control: 'no-cache'
    validate_certs: 'no'
  environment:
    no_proxy: '{{ ansible_default_ipv4.address }}'
  when:
    - mysql_cluster_mgr_mode == "multi-primary"
    - mysql_cluster_mode == "mgr"
    - check_consul_local.status == 405
  register: register_status
  until: register_status.status == 200
  retries: 3
  delay: 2
  no_log: true
  changed_when: false
  failed_when: false

- name: Check register client are accessible from current host.
  uri:
    url: '{{ consul_public_http_prot }}://{{ item }}:{{ consul_public_http_port }}/v1/agent/service/register'
    method: 'GET'
    timeout: '5'
    validate_certs: 'no'
  environment:
    no_proxy: '{{ item }}'
  loop: '{{ consul_public_clients }}'
  changed_when: false
  failed_when: false
  register: check_consul_reg

- name: Register MySQL exporter with an health check.
  uri:
    url: '{{ consul_public_http_prot }}://{{ item.client }}:{{ consul_public_http_port }}/v1/agent/service/register'
    method: 'PUT'
    body: '{"tags":["prometheus","exporter"],"ID":"{{ inventory_hostname | lower }}_mysqld_exporter","name":"mysqld_exporter","address":"{{ ansible_default_ipv4.address }}","port":{{ mysql_port_exporter }},"meta":{"application":"Database","metrics_path":"/metrics","instance":"{{ inventory_hostname | lower }}","customer":"{{ customer | title | regex_replace("_", "-") }}","project":"{{ group_names[-1] | title | regex_replace("_", "-") }}","group":"{{ group_names[0] | title }}","datacenter": "{{ datacenter | lower }}","domain":"{{ domain | lower }}"{% if mysql_cluster_mode != "standalone" %},"replicaset":"{{ group_names[-1] | upper | regex_replace("_", "-") }}"{% endif %},"environment":"{{ environments | lower }}"{% if mysql_cluster_mode == "mgr" %},"replicaset":"cls-{{ group_names[0] | title | regex_replace("_", "-") }}"{% endif %}{% if tags is defined %},{{ tags | to_json | regex_replace("{") | regex_replace("}") }}{% endif %}},"checks":[{"http":"http://{{ ansible_default_ipv4.address }}:{{ mysql_port_exporter }}/metrics","interval":"60s","tls_skip_verify":true,"method":"HEAD","timeout":"10s"}]}'
    body_format: 'json'
    status_code: '200'
    headers:
      X-Consul-Token: '{{ consul_public_exporter_token }}'
      X-Requested-By: '{{ ansible_default_ipv4.address }}'
      cache-control: 'no-cache'
    validate_certs: 'no'
  environment:
    no_proxy: '{{ item.client }}'
  loop: "{{ check_consul_reg.results | json_query('[*].{client:item,status:status}') }}"
  when: item.status == 405
  register: register_status
  until: register_status.status == 200
  retries: 3
  delay: 2
  no_log: true
  changed_when: false
  failed_when: false
