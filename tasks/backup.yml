---
- name: Creating Mysql backup folder.
  file:
    dest: '{{ mysql_path }}/{{ item.path }}'
    state: 'directory'
    owner: '{{ item.owner }}'
    group: '{{ item.owner }}'
    mode: '{{ item.mode }}'
  loop:
    - { path: 'backup', owner: 'root', mode: '0755' }
    - { path: 'backup/mysql', owner: 'mysql', mode: '0750' }

- name: Create user xtrabackup with privileges for replication.
  mysql_user:
    login_user: 'root'
    login_password: '{{ mysql_sa_pass }}'
    login_unix_socket: '/tmp/mysql.sock'
    name: 'xtrabackup'
    password: "{{ lookup('password', '' + group_names[-1] + ':xtrabackup length=12 chars=ascii_letters,digits') }}"
    host: '127.0.0.1'
    priv: '*.*:RELOAD,LOCK TABLES,REPLICATION CLIENT,CREATE TABLESPACE,PROCESS,SUPER,CREATE,INSERT,SELECT{% if mysql_ssl | bool %},REQUIRESSL{% endif %}'
    state: 'present'
  no_log: true
  when:
    - mysql_cluster_mode == 'replication' or mysql_cluster_mode == 'mgr'
    - mysql_servers[0] in ansible_default_ipv4.address
    - mysql_servers | length > 1

- name: Create user xtrabackup with privileges for standalone.
  mysql_user:
    login_user: 'root'
    login_password: '{{ mysql_sa_pass }}'
    login_unix_socket: '/tmp/mysql.sock'
    name: 'xtrabackup'
    password: "{{ lookup('password', '' + group_names[-1] + ':xtrabackup length=12 chars=ascii_letters,digits') }}"
    host: '127.0.0.1'
    priv: '*.*:RELOAD,LOCK TABLES,REPLICATION CLIENT,CREATE TABLESPACE,PROCESS,SUPER,CREATE,INSERT,SELECT{% if mysql_ssl | bool %},REQUIRESSL{% endif %}'
    state: 'present'
  no_log: true
  when: mysql_cluster_mode == 'standalone' or mysql_servers | length == 1

- name: Xtrabackup user password outputs.
  copy:
    content: "{{ lookup('password', '' + group_names[-1] + ':xtrabackup length=12 chars=ascii_letters,digits') }}"
    dest: '/tmp/mysql_xtrabackup_user.passwd'
    mode: '0600'
    owner: 'root'
    group: 'root'
  when: mysql_servers is not defined or mysql_servers[0] in ansible_default_ipv4.address
  no_log: true

- name: Creating Rclone configureation folder.
  file:
    dest: '/etc/rclone'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'
  when:
    - mysql_backupset_arg.cloud_rsync | bool
    - mysql_backupset_arg.cloud_drive is defined

- name: Rclone configuration file transfer.
  template:
    src: 'rclone.conf.j2'
    dest: '/etc/rclone/mysql.conf'
    owner: 'mysql'
    group: 'mysql'
    mode: '0640'
  when:
    - mysql_backupset_arg.cloud_rsync | bool
    - mysql_backupset_arg.cloud_drive is defined

- name : MySQL backup job.
  cron:
    user: 'mysql'
    name: 'MySQL backup'
    minute: "{{ 60 | random(seed=ansible_hostname) }}"
    hour: "{{ 6 | random(seed=ansible_hostname,step=1) }}"
    job: '/bin/sh /usr/local/bin/innobackupex-runner.sh'